#
# TencentBlueKing is pleased to support the open source community by making
# 蓝鲸智云 - API 网关(BlueKing - APIGateway) available.
# Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.
# Licensed under the MIT License (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#     http://opensource.org/licenses/MIT
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions and
# limitations under the License.
#
# We undertake not to change the open source license (MIT license) applicable
# to the current version of the project delivered to anyone in the future.
#
# Generated by Django 2.0.13 on 2019-11-27 02:24

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("schema", "0001_initial"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessStrategy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("_config", models.TextField(db_column="config")),
                ("name", models.CharField(db_index=True, max_length=64)),
                (
                    "type",
                    models.CharField(
                        choices=[("ip_access_control", "IP_ACCESS_CONTROL"), ("rate_limit", "RATE_LIMIT")],
                        max_length=32,
                    ),
                ),
                ("comment", models.CharField(blank=True, default="", max_length=512)),
                ("api", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.API")),
                ("schema", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="schema.Schema")),
            ],
            options={
                "verbose_name": "访问策略",
                "verbose_name_plural": "访问策略",
                "db_table": "access_strategy",
            },
        ),
        migrations.CreateModel(
            name="AccessStrategyBinding",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "scope_type",
                    models.CharField(choices=[("stage", "STAGE"), ("resource", "RESOURCE")], max_length=32),
                ),
                ("scope_id", models.IntegerField(db_index=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("ip_access_control", "IP_ACCESS_CONTROL"), ("rate_limit", "RATE_LIMIT")],
                        max_length=32,
                    ),
                ),
                (
                    "access_strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="access_strategy.AccessStrategy"
                    ),
                ),
            ],
            options={
                "verbose_name": "访问策略绑定",
                "verbose_name_plural": "访问策略绑定",
                "db_table": "access_strategy_binding",
            },
        ),
        migrations.CreateModel(
            name="IPGroup",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
                ("created_by", models.CharField(blank=True, max_length=32, null=True)),
                ("updated_by", models.CharField(blank=True, max_length=32, null=True)),
                ("name", models.CharField(max_length=64)),
                ("_ips", models.TextField(db_column="ips")),
                ("comment", models.CharField(blank=True, default="", max_length=512)),
                ("api", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.API")),
            ],
            options={
                "verbose_name": "IP白名单",
                "verbose_name_plural": "IP白名单",
                "db_table": "access_strategy_ip_group",
            },
        ),
        migrations.AlterUniqueTogether(
            name="ipgroup",
            unique_together={("api", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="accessstrategybinding",
            unique_together={("scope_type", "scope_id", "type")},
        ),
        migrations.AlterUniqueTogether(
            name="accessstrategy",
            unique_together={("api", "name", "type")},
        ),
    ]
